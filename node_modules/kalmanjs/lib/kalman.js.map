{"version":3,"sources":["../src/kalman.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAUqB,YAAY;;;;;;;;;;;;AAW/B,WAXmB,YAAY,GAWuB;qEAAJ,EAAE;;sBAAvC,CAAC;QAAD,CAAC,0BAAG,CAAC;sBAAE,CAAC;QAAD,CAAC,0BAAG,CAAC;sBAAE,CAAC;QAAD,CAAC,0BAAG,CAAC;sBAAE,CAAC;QAAD,CAAC,0BAAG,CAAC;sBAAE,CAAC;QAAD,CAAC,0BAAG,CAAC;;0BAX3B,YAAY;;AAa7B,QAAI,CAAC,CAAC,GAAG,CAAC;AAAC,AACX,QAAI,CAAC,CAAC,GAAG,CAAC;;AAAC,AAEX,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,QAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,QAAI,CAAC,CAAC,GAAG,GAAG;AAAC,GACd;;;;;;;;AAAA;eArBkB,YAAY;;2BA6BxB,CAAC,EAAS;UAAP,CAAC,yDAAG,CAAC;;AAEb,UAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACjB,YAAI,CAAC,CAAC,GAAG,AAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAI,CAAC,CAAC;AAC1B,YAAI,CAAC,GAAG,GAAG,AAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAI,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA,AAAC,CAAC;OACjD,MACI;;;AAGH,YAAM,KAAK,GAAG,AAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAK,IAAI,CAAC,CAAC,GAAG,CAAC,AAAC,CAAC;AAC/C,YAAM,OAAO,GAAG,AAAC,AAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAI,IAAI,CAAC,CAAC,GAAI,IAAI,CAAC,CAAC;;;AAAC,AAGxD,YAAM,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,AAAC,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,CAAC,GAAI,IAAI,CAAC,CAAC,CAAA,CAAC,AAAC;;;AAAC,AAG1E,YAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAI,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,AAAC,CAAC;AAC5C,YAAI,CAAC,GAAG,GAAG,OAAO,GAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,OAAO,AAAC,CAAC;OAC7C;;AAED,aAAO,IAAI,CAAC,CAAC,CAAC;KACf;;;;;;;;;sCAMiB;AAChB,aAAO,IAAI,CAAC,CAAC,CAAC;KACf;;;;;;;;;wCAMmB,KAAK,EAAE;AACzB,UAAI,CAAC,CAAC,GAAG,KAAK,CAAC;KAChB;;;;;;;;;oCAMe,KAAK,EAAE;AACrB,UAAI,CAAC,CAAC,GAAG,KAAK,CAAC;KAChB;;;SA1EkB,YAAY;;;kBAAZ,YAAY","file":"kalman.js","sourcesContent":["/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015 Wouter Bulten\n* @license GNU LESSER GENERAL PUBLIC LICENSE v3\n* @preserve\n*/\nexport default class KalmanFilter {\n\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  constructor({R = 1, Q = 1, A = 1, B = 0, C = 1} = {}) {\n\n    this.R = R; // noise power desirable\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n  filter(z, u = 0) {\n\n    if (isNaN(this.x)) {\n      this.x = (1 / this.C) * z;\n      this.cov = (1 / this.C) * this.Q * (1 / this.C);\n    }\n    else {\n\n      // Compute prediction\n      const predX = (this.A * this.x) + (this.B * u);\n      const predCov = ((this.A * this.cov) * this.A) + this.R;\n\n      // Kalman gain\n      const K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));\n\n      // Correction\n      this.x = predX + K * (z - (this.C * predX));\n      this.cov = predCov - (K * this.C * predCov);\n    }\n\n    return this.x;\n  }\n\n  /**\n  * Return the last filtered measurement\n  * @return {Number}\n  */\n  lastMeasurement() {\n    return this.x;\n  }\n\n  /**\n  * Set measurement noise Q\n  * @param {Number} noise\n  */\n  setMeasurementNoise(noise) {\n    this.Q = noise;\n  }\n\n  /**\n  * Set the process noise R\n  * @param {Number} noise\n  */\n  setProcessNoise(noise) {\n    this.R = noise;\n  }\n}\n"]}